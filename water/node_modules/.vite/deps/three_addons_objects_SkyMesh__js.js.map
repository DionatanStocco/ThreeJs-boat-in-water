{
  "version": 3,
  "sources": ["../../three/examples/jsm/objects/SkyMesh.js"],
  "sourcesContent": ["import {\n\tBackSide,\n\tBoxGeometry,\n\tMesh,\n\tVector3\n} from 'three';\nimport { Fn, NodeMaterial, float, vec3, acos, add, mul, clamp, cos, dot, exp, max, mix, modelViewProjection, normalize, positionWorld, pow, smoothstep, sub, varying, varyingProperty, vec4, uniform, cameraPosition } from 'three/tsl';\n\n/**\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * https://www.researchgate.net/publication/220720443_A_Practical_Analytic_Model_for_Daylight\n *\n * First implemented by Simon Wallner\n * http://simonwallner.at/project/atmospheric-scattering/\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nclass SkyMesh extends Mesh {\n\n\tconstructor() {\n\n\t\tconst material = new NodeMaterial();\n\n\t\tsuper( new BoxGeometry( 1, 1, 1 ), material );\n\n\t\tthis.turbidity = uniform( 2 );\n\t\tthis.rayleigh = uniform( 1 );\n\t\tthis.mieCoefficient = uniform( 0.005 );\n\t\tthis.mieDirectionalG = uniform( 0.8 );\n\t\tthis.sunPosition = uniform( new Vector3() );\n\t\tthis.upUniform = uniform( new Vector3( 0, 1, 0 ) );\n\n\t\tthis.isSky = true;\n\n\t\tconst vertexNode = /*@__PURE__*/ Fn( () => {\n\n\t\t\t// constants for atmospheric scattering\n\t\t\tconst e = float( 2.71828182845904523536028747135266249775724709369995957 );\n\t\t\t// const pi = float( 3.141592653589793238462643383279502884197169 );\n\n\t\t\t// wavelength of used primaries, according to preetham\n\t\t\t// const lambda = vec3( 680E-9, 550E-9, 450E-9 );\n\t\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n\t\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n\t\t\tconst totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );\n\n\t\t\t// mie stuff\n\t\t\t// K coefficient for the primaries\n\t\t\t// const v = float( 4.0 );\n\t\t\t// const K = vec3( 0.686, 0.678, 0.666 );\n\t\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n\t\t\tconst MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );\n\n\t\t\t// earth shadow hack\n\t\t\t// cutoffAngle = pi / 1.95;\n\t\t\tconst cutoffAngle = float( 1.6110731556870734 );\n\t\t\tconst steepness = float( 1.5 );\n\t\t\tconst EE = float( 1000.0 );\n\n\t\t\t// varying sun position\n\n\t\t\tconst vSunDirection = normalize( this.sunPosition );\n\t\t\tvaryingProperty( 'vec3', 'vSunDirection' ).assign( vSunDirection );\n\n\t\t\t// varying sun intensity\n\n\t\t\tconst angle = dot( vSunDirection, this.upUniform );\n\t\t\tconst zenithAngleCos = clamp( angle, - 1, 1 );\n\t\t\tconst sunIntensity = EE.mul( max( 0.0, float( 1.0 ).sub( pow( e, cutoffAngle.sub( acos( zenithAngleCos ) ).div( steepness ).negate() ) ) ) );\n\t\t\tvaryingProperty( 'float', 'vSunE' ).assign( sunIntensity );\n\n\t\t\t// varying sun fade\n\n\t\t\tconst vSunfade = float( 1.0 ).sub( clamp( float( 1.0 ).sub( exp( this.sunPosition.y.div( 450000.0 ) ) ), 0, 1 ) );\n\t\t\tvaryingProperty( 'float', 'vSunfade' ).assign( vSunfade );\n\n\t\t\t// varying vBetaR\n\n\t\t\tconst rayleighCoefficient = this.rayleigh.sub( float( 1.0 ).mul( float( 1.0 ).sub( vSunfade ) ) );\n\n\t\t\t// extinction (absorbtion + out scattering)\n\t\t\t// rayleigh coefficients\n\t\t\tvaryingProperty( 'vec3', 'vBetaR' ).assign( totalRayleigh.mul( rayleighCoefficient ) );\n\n\t\t\t// varying vBetaM\n\n\t\t\tconst c = float( 0.2 ).mul( this.turbidity ).mul( 10E-18 );\n\t\t\tconst totalMie = float( 0.434 ).mul( c ).mul( MieConst );\n\n\t\t\tvaryingProperty( 'vec3', 'vBetaM' ).assign( totalMie.mul( this.mieCoefficient ) );\n\n\t\t\t// position\n\n\t\t\tconst position = modelViewProjection();\n\t\t\tposition.z.assign( position.w ); // set z to camera.far\n\n\t\t\treturn position;\n\n\t\t} )();\n\n\t\tconst fragmentNode = /*@__PURE__*/ Fn( () => {\n\n\t\t\tconst vSunDirection = varying( vec3(), 'vSunDirection' );\n\t\t\tconst vSunE = varying( float(), 'vSunE' );\n\t\t\tconst vSunfade = varying( float(), 'vSunfade' );\n\t\t\tconst vBetaR = varying( vec3(), 'vBetaR' );\n\t\t\tconst vBetaM = varying( vec3(), 'vBetaM' );\n\n\t\t\t// constants for atmospheric scattering\n\t\t\tconst pi = float( 3.141592653589793238462643383279502884197169 );\n\n\t\t\t// optical length at zenith for molecules\n\t\t\tconst rayleighZenithLength = float( 8.4E3 );\n\t\t\tconst mieZenithLength = float( 1.25E3 );\n\t\t\t// 66 arc seconds -> degrees, and the cosine of that\n\t\t\tconst sunAngularDiameterCos = float( 0.999956676946448443553574619906976478926848692873900859324 );\n\n\t\t\t// 3.0 / ( 16.0 * pi )\n\t\t\tconst THREE_OVER_SIXTEENPI = float( 0.05968310365946075 );\n\t\t\t// 1.0 / ( 4.0 * pi )\n\t\t\tconst ONE_OVER_FOURPI = float( 0.07957747154594767 );\n\n\t\t\t//\n\n\t\t\tconst direction = normalize( positionWorld.sub( cameraPosition ) );\n\n\t\t\t// optical length\n\t\t\t// cutoff angle at 90 to avoid singularity in next formula.\n\t\t\tconst zenithAngle = acos( max( 0.0, dot( this.upUniform, direction ) ) );\n\t\t\tconst inverse = float( 1.0 ).div( cos( zenithAngle ).add( float( 0.15 ).mul( pow( float( 93.885 ).sub( zenithAngle.mul( 180.0 ).div( pi ) ), - 1.253 ) ) ) );\n\t\t\tconst sR = rayleighZenithLength.mul( inverse );\n\t\t\tconst sM = mieZenithLength.mul( inverse );\n\n\t\t\t// combined extinction factor\n\t\t\tconst Fex = exp( mul( vBetaR, sR ).add( mul( vBetaM, sM ) ).negate() );\n\n\t\t\t// in scattering\n\t\t\tconst cosTheta = dot( direction, vSunDirection );\n\n\t\t\t// betaRTheta\n\n\t\t\tconst c = cosTheta.mul( 0.5 ).add( 0.5 );\n\t\t\tconst rPhase = THREE_OVER_SIXTEENPI.mul( float( 1.0 ).add( pow( c, 2.0 ) ) );\n\t\t\tconst betaRTheta = vBetaR.mul( rPhase );\n\n\t\t\t// betaMTheta\n\n\t\t\tconst g2 = pow( this.mieDirectionalG, 2.0 );\n\t\t\tconst inv = float( 1.0 ).div( pow( float( 1.0 ).sub( float( 2.0 ).mul( this.mieDirectionalG ).mul( cosTheta ) ).add( g2 ), 1.5 ) );\n\t\t\tconst mPhase = ONE_OVER_FOURPI.mul( float( 1.0 ).sub( g2 ) ).mul( inv );\n\t\t\tconst betaMTheta = vBetaM.mul( mPhase );\n\n\t\t\tconst Lin = pow( vSunE.mul( add( betaRTheta, betaMTheta ).div( add( vBetaR, vBetaM ) ) ).mul( sub( 1.0, Fex ) ), vec3( 1.5 ) );\n\t\t\tLin.mulAssign( mix( vec3( 1.0 ), pow( vSunE.mul( add( betaRTheta, betaMTheta ).div( add( vBetaR, vBetaM ) ) ).mul( Fex ), vec3( 1.0 / 2.0 ) ), clamp( pow( sub( 1.0, dot( this.upUniform, vSunDirection ) ), 5.0 ), 0.0, 1.0 ) ) );\n\n\t\t\t// nightsky\n\n\t\t\tconst L0 = vec3( 0.1 ).mul( Fex );\n\n\t\t\t// composition + solar disc\n\t\t\tconst sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos.add( 0.00002 ), cosTheta );\n\t\t\tL0.addAssign( vSunE.mul( 19000.0 ).mul( Fex ).mul( sundisk ) );\n\n\t\t\tconst texColor = add( Lin, L0 ).mul( 0.04 ).add( vec3( 0.0, 0.0003, 0.00075 ) );\n\n\t\t\tconst retColor = pow( texColor, vec3( float( 1.0 ).div( float( 1.2 ).add( vSunfade.mul( 1.2 ) ) ) ) );\n\n\t\t\treturn vec4( retColor, 1.0 );\n\n\t\t} )();\n\n\t\tmaterial.side = BackSide;\n\t\tmaterial.depthWrite = false;\n\n\t\tmaterial.vertexNode = vertexNode;\n\t\tmaterial.fragmentNode = fragmentNode;\n\n\t}\n\n}\n\nexport { SkyMesh };\n"],
  "mappings": "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",
  "names": []
}
