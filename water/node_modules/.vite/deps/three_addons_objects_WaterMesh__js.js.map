{
  "version": 3,
  "sources": ["../../three/examples/jsm/objects/WaterMesh.js"],
  "sourcesContent": ["import {\n\tColor,\n\tMesh,\n\tVector3\n} from 'three';\nimport { Fn, NodeMaterial, add, cameraPosition, div, normalize, positionWorld, sub, timerLocal, texture, vec2, vec3, vec4, max, dot, reflect, pow, length, float, uniform, reflector, mul, mix } from 'three/tsl';\n\n/**\n * Work based on :\n * https://github.com/Slayvin: Flat mirror for three.js\n * https://home.adelphi.edu/~stemkoski/ : An implementation of water shader based on the flat mirror\n * http://29a.ch/ && http://29a.ch/slides/2012/webglwater/ : Water shader explanations in WebGL\n */\n\nclass WaterMesh extends Mesh {\n\n\tconstructor( geometry, options ) {\n\n\t\tconst material = new NodeMaterial();\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isWater = true;\n\n\t\tthis.resolution = options.resolution !== undefined ? options.resolution : 0.5;\n\n\t\t// uniforms\n\n\t\tthis.waterNormals = texture( options.waterNormals );\n\t\tthis.alpha = uniform( options.alpha !== undefined ? options.alpha : 1.0 );\n\t\tthis.size = uniform( options.size !== undefined ? options.size : 1.0 );\n\t\tthis.sunColor = uniform( new Color( options.sunColor !== undefined ? options.sunColor : 0xffffff ) );\n\t\tthis.sunDirection = uniform( options.sunDirection !== undefined ? options.sunDirection : new Vector3( 0.70707, 0.70707, 0.0 ) );\n\t\tthis.waterColor = uniform( new Color( options.waterColor !== undefined ? options.waterColor : 0x7f7f7f ) );\n\t\tthis.distortionScale = uniform( options.distortionScale !== undefined ? options.distortionScale : 20.0 );\n\n\t\t// TSL\n\n\t\tconst timeNode = timerLocal();\n\n\t\tconst getNoise = Fn( ( [ uv ] ) => {\n\n\t\t\tconst uv0 = add( div( uv, 103 ), vec2( div( timeNode, 17 ), div( timeNode, 29 ) ) ).toVar();\n\t\t\tconst uv1 = div( uv, 107 ).sub( vec2( div( timeNode, - 19 ), div( timeNode, 31 ) ) ).toVar();\n\t\t\tconst uv2 = add( div( uv, vec2( 8907.0, 9803.0 ) ), vec2( div( timeNode, 101 ), div( timeNode, 97 ) ) ).toVar();\n\t\t\tconst uv3 = sub( div( uv, vec2( 1091.0, 1027.0 ) ), vec2( div( timeNode, 109 ), div( timeNode, - 113 ) ) ).toVar();\n\n\t\t\tconst sample0 = this.waterNormals.uv( uv0 );\n\t\t\tconst sample1 = this.waterNormals.uv( uv1 );\n\t\t\tconst sample2 = this.waterNormals.uv( uv2 );\n\t\t\tconst sample3 = this.waterNormals.uv( uv3 );\n\n\t\t\tconst noise = sample0.add( sample1 ).add( sample2 ).add( sample3 );\n\n\t\t\treturn noise.mul( 0.5 ).sub( 1 );\n\n\t\t} );\n\n\t\tconst fragmentNode = Fn( () => {\n\n\t\t\tconst noise = getNoise( positionWorld.xz.mul( this.size ) );\n\t\t\tconst surfaceNormal = normalize( noise.xzy.mul( 1.5, 1.0, 1.5 ) );\n\n\t\t\tconst diffuseLight = vec3( 0 ).toVar();\n\t\t\tconst specularLight = vec3( 0 ).toVar();\n\n\t\t\tconst worldToEye = cameraPosition.sub( positionWorld );\n\t\t\tconst eyeDirection = normalize( worldToEye );\n\n\t\t\tconst reflection = normalize( reflect( this.sunDirection.negate(), surfaceNormal ) );\n\t\t\tconst direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\tspecularLight.addAssign( pow( direction, 100 ).mul( this.sunColor ).mul( 2.0 ) );\n\t\t\tdiffuseLight.addAssign( max( dot( this.sunDirection, surfaceNormal ), 0.0 ).mul( this.sunColor ).mul( 0.5 ) );\n\n\t\t\tconst distance = length( worldToEye );\n\n\t\t\tconst distortion = surfaceNormal.xy.mul( float( 0.001 ).add( float( 1.0 ).div( distance ) ) ).mul( this.distortionScale );\n\n\t\t\tconst mirrorSampler = reflector();\n\t\t\tmirrorSampler.uvNode = mirrorSampler.uvNode.add( distortion );\n\t\t\tmirrorSampler.resolution = this.resolution;\n\n\t\t\tthis.add( mirrorSampler.target );\n\n\t\t\tconst theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\tconst rf0 = float( 0.3 );\n\t\t\tconst reflectance = mul( pow( float( 1.0 ).sub( theta ), 5.0 ), float( 1.0 ).sub( rf0 ) ).add( rf0 );\n\t\t\tconst scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ).mul( this.waterColor );\n\t\t\tconst albedo = mix( this.sunColor.mul( diffuseLight ).mul( 0.3 ).add( scatter ), mirrorSampler.rgb.mul( specularLight ).add( mirrorSampler.rgb.mul( 0.9 ) ).add( vec3( 0.1 ) ), reflectance );\n\n\t\t\treturn vec4( albedo, this.alpha );\n\n\t\t} )();\n\n\t\tmaterial.fragmentNode = fragmentNode;\n\n\t}\n\n}\n\nexport { WaterMesh };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAM,YAAN,cAAwB,KAAK;AAAA,EAE5B,YAAa,UAAU,SAAU;AAEhC,UAAM,WAAW,IAAI,aAAa;AAElC,UAAO,UAAU,QAAS;AAE1B,SAAK,UAAU;AAEf,SAAK,aAAa,QAAQ,eAAe,SAAY,QAAQ,aAAa;AAI1E,SAAK,eAAe,QAAS,QAAQ,YAAa;AAClD,SAAK,QAAQ,QAAS,QAAQ,UAAU,SAAY,QAAQ,QAAQ,CAAI;AACxE,SAAK,OAAO,QAAS,QAAQ,SAAS,SAAY,QAAQ,OAAO,CAAI;AACrE,SAAK,WAAW,QAAS,IAAI,MAAO,QAAQ,aAAa,SAAY,QAAQ,WAAW,QAAS,CAAE;AACnG,SAAK,eAAe,QAAS,QAAQ,iBAAiB,SAAY,QAAQ,eAAe,IAAI,QAAS,SAAS,SAAS,CAAI,CAAE;AAC9H,SAAK,aAAa,QAAS,IAAI,MAAO,QAAQ,eAAe,SAAY,QAAQ,aAAa,OAAS,CAAE;AACzG,SAAK,kBAAkB,QAAS,QAAQ,oBAAoB,SAAY,QAAQ,kBAAkB,EAAK;AAIvG,UAAM,WAAW,WAAW;AAE5B,UAAM,WAAW,GAAI,CAAE,CAAE,EAAG,MAAO;AAElC,YAAM,MAAM,IAAK,IAAK,IAAI,GAAI,GAAG,KAAM,IAAK,UAAU,EAAG,GAAG,IAAK,UAAU,EAAG,CAAE,CAAE,EAAE,MAAM;AAC1F,YAAM,MAAM,IAAK,IAAI,GAAI,EAAE,IAAK,KAAM,IAAK,UAAU,GAAK,GAAG,IAAK,UAAU,EAAG,CAAE,CAAE,EAAE,MAAM;AAC3F,YAAM,MAAM,IAAK,IAAK,IAAI,KAAM,MAAQ,IAAO,CAAE,GAAG,KAAM,IAAK,UAAU,GAAI,GAAG,IAAK,UAAU,EAAG,CAAE,CAAE,EAAE,MAAM;AAC9G,YAAM,MAAM,IAAK,IAAK,IAAI,KAAM,MAAQ,IAAO,CAAE,GAAG,KAAM,IAAK,UAAU,GAAI,GAAG,IAAK,UAAU,IAAM,CAAE,CAAE,EAAE,MAAM;AAEjH,YAAM,UAAU,KAAK,aAAa,GAAI,GAAI;AAC1C,YAAM,UAAU,KAAK,aAAa,GAAI,GAAI;AAC1C,YAAM,UAAU,KAAK,aAAa,GAAI,GAAI;AAC1C,YAAM,UAAU,KAAK,aAAa,GAAI,GAAI;AAE1C,YAAM,QAAQ,QAAQ,IAAK,OAAQ,EAAE,IAAK,OAAQ,EAAE,IAAK,OAAQ;AAEjE,aAAO,MAAM,IAAK,GAAI,EAAE,IAAK,CAAE;AAAA,IAEhC,CAAE;AAEF,UAAM,eAAe,GAAI,MAAM;AAE9B,YAAM,QAAQ,SAAU,cAAc,GAAG,IAAK,KAAK,IAAK,CAAE;AAC1D,YAAM,gBAAgB,UAAW,MAAM,IAAI,IAAK,KAAK,GAAK,GAAI,CAAE;AAEhE,YAAM,eAAe,KAAM,CAAE,EAAE,MAAM;AACrC,YAAM,gBAAgB,KAAM,CAAE,EAAE,MAAM;AAEtC,YAAM,aAAa,eAAe,IAAK,aAAc;AACrD,YAAM,eAAe,UAAW,UAAW;AAE3C,YAAM,aAAa,UAAW,QAAS,KAAK,aAAa,OAAO,GAAG,aAAc,CAAE;AACnF,YAAM,YAAY,MAAK,GAAK,IAAK,cAAc,UAAW,CAAE;AAC5D,oBAAc,UAAW,IAAK,WAAW,GAAI,EAAE,IAAK,KAAK,QAAS,EAAE,IAAK,CAAI,CAAE;AAC/E,mBAAa,UAAW,MAAK,IAAK,KAAK,cAAc,aAAc,GAAG,CAAI,EAAE,IAAK,KAAK,QAAS,EAAE,IAAK,GAAI,CAAE;AAE5G,YAAM,WAAW,OAAQ,UAAW;AAEpC,YAAM,aAAa,cAAc,GAAG,IAAK,MAAO,IAAM,EAAE,IAAK,MAAO,CAAI,EAAE,IAAK,QAAS,CAAE,CAAE,EAAE,IAAK,KAAK,eAAgB;AAExH,YAAM,gBAAgB,UAAU;AAChC,oBAAc,SAAS,cAAc,OAAO,IAAK,UAAW;AAC5D,oBAAc,aAAa,KAAK;AAEhC,WAAK,IAAK,cAAc,MAAO;AAE/B,YAAM,QAAQ,MAAK,IAAK,cAAc,aAAc,GAAG,CAAI;AAC3D,YAAM,MAAM,MAAO,GAAI;AACvB,YAAM,cAAc,IAAK,IAAK,MAAO,CAAI,EAAE,IAAK,KAAM,GAAG,CAAI,GAAG,MAAO,CAAI,EAAE,IAAK,GAAI,CAAE,EAAE,IAAK,GAAI;AACnG,YAAM,UAAU,MAAK,GAAK,IAAK,eAAe,YAAa,CAAE,EAAE,IAAK,KAAK,UAAW;AACpF,YAAM,SAAS,IAAK,KAAK,SAAS,IAAK,YAAa,EAAE,IAAK,GAAI,EAAE,IAAK,OAAQ,GAAG,cAAc,IAAI,IAAK,aAAc,EAAE,IAAK,cAAc,IAAI,IAAK,GAAI,CAAE,EAAE,IAAK,KAAM,GAAI,CAAE,GAAG,WAAY;AAE5L,aAAO,KAAM,QAAQ,KAAK,KAAM;AAAA,IAEjC,CAAE,EAAE;AAEJ,aAAS,eAAe;AAAA,EAEzB;AAED;",
  "names": []
}
